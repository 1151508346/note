Px表示“绝对尺寸”（并非真正的绝对），实际上就是css中定义的像素（此像素与设备的物理像素有一定的区别，后续详细说明见文末说明1），利用px设置字体大小及元素宽高等比较稳定和精确。Px的缺点是其不能适应浏览器缩放时产生的变化，因此一般不用于响应式网站。

em表示相对尺寸，其相对于当前对象内文本的font-size（如果当前对象内文本的font-size计量单位也是em，则当前对象内文本的font-size的参考对象为父元素文本font-size）。使用em可以较好的相应设备屏幕尺寸的变化，但是在进行元素设置时都需要知道父元素文本的font-size及当前对象内文本的font-size，如有遗漏可能会导致错误。

rem也表示相对尺寸，其参考对象为根元素<html>的font-size，因此只需要确定这一个font-size。



 伪类
a:link {color:gray;}/*链接没有被访问时前景色为灰色*/
.demo a:visited{color:yellow;}/*链接被访问过后前景色为黄色*/
.demo a:hover{color:green;}/*鼠标悬浮在链接上时前景色为绿色*/
.demo a:active{color:blue;}/*鼠标点中激活链接那一下前景色为蓝色*/

:hover用于当用户把鼠标移动到元素上面时的效果；
:active用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了）
:focus用于元素成为焦点，这个经常用在表单元素上。



伪类选择器

:first-child选择某个元素的第一个子元素；
:last-child选择某个元素的最后一个子元素；
:nth-child()选择某个元素的一个或多个特定的子元素；
:nth-last-child()选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；
:nth-of-type()选择指定的元素；
:nth-last-of-type()选择指定的元素，从元素的最后一个开始计算；
:first-of-type选择一个上级元素下的第一个同类子元素；
:last-of-type选择一个上级元素的最后一个同类子元素；
:only-child选择的元素是它的父元素的唯一一个了元素；
:only-of-type选择一个元素是它的上级元素的唯一一个相同类型的子元素；
:empty选择的元素里面没有任何内容。



伪元素
CSS中的伪元素大家以前看过：:first-line,:first-letter,:before,:after;那么在CSS3中，他对伪元素进行了一定的调整，在以前的基础上增加了一个“：”也就是现在变成了“::first-letter,::first-line,::before,::after”另外他还增加了一个“::selection”,两个“：：”和一个“：”css3中主要用来区分伪类和伪元素，到目前来说，这两种方式都是被接受的，也就是说不管使用哪种写法所起的作用都是一样的，只是一个书写格式不同而以。

那么我们简单了解一下他们的作用

::first-line选择元素的第一行，比如说改变每个段落的第一行文本的样式，我们就可以使用这个

p::first-line {font-weight:bold;}
 

::first-letter选择文本块的第一个字母，除非在同一行里面包含一些其它元素，不过这个主要运用于段落排版上多，比如说首字下沉，

p::first-letter {font-size: 56px;float:left;margin-right:3px;}
 

::before和::after这两个主要用来给元素的前面或后面插入内容，这两个常用"content"配合使用，见过最多的就是清除浮动，



JS中attribute和property的区别
property 和 attribute非常容易混淆，两个单词的中文翻译也都非常相近（property：属性，attribute：特性），但实际上，二者是不同的东西，属于不同的范畴。

property是DOM中的属性，是JavaScript里的对象；
attribute是HTML标签上的特性，它的值只能够是字符串；

sass 和scss 有什么区别

sass和scss 其实是一种东西，我们平时都称之为sass 两者之间不同之处有以下两点
1.文件扩展名不同，sass是以.sass后缀为扩展名，而scss是以.scss为扩展名的
2.语法书写方式不同，sass是以严格的缩进式语法规则来书写的，不带大括号和分号，而scss的语法书写和我们的css语法书写方式非常类似

简述flex弹性布局

在CSS 3中，CSS Flexible Box模块为一个非常重要的模块，该模块用于以非常灵活的方式实现页面布局处理。

       虽然可以使用其他CSS样式属性来实现页面布局处理，但是如果使用CSS Flexible Box模块中定义的弹性盒布局技术，可以根据屏幕尺寸或浏览器窗口尺寸自动调整页面中各局部区域的显示方式，即实现非常灵活的布局处理。

       引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的条目进行排列、对齐和分配空白空间。即便容器中条目的尺寸未知或是动态变化的，弹性盒布局模型也能正常的工作。在该布局模型中，容器会根据布局的需要，调整其中包含的条目的尺寸和顺序来最好地填充所有可用的空间。当容器的尺寸由于屏幕大小或窗口尺寸发生变化时，其中包含的条目也会被动态地调整。比如当容器尺寸变大时，其中包含的条目会被拉伸以占满多余的空白空间；当容器尺寸变小时，条目会被缩小以防止超出容器的范围。弹性盒布局是与方向无关的。在传统的布局方式中，block 布局是把块在垂直方向从上到下依次排列的；而 inline 布局则是在水平方向来排列。弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。

自己总结：
flex弹性布局，以一种非常灵活的方式实现页面的布局，可以根据屏幕尺寸或者浏览器窗口尺寸自动调整页面中各局部区域的显示方式，以一种更加有效的方式对一个容器中的条目进行排列、对其和分配空白空间 ，

垂直居中三种方式
例如div相对于body进行定位
1. 	div{
		width:300px;
	
		height:300px;
		position:absolute;
		top:50%;
		left:50%;
		margin-left:-150px;
		margin-top:-150px;
	}

	div{
		width:300px;
	
		height:300px;
		position:absolute;
		top:0;
		left:0;
		bottom:0;
		right:0;
	}
	body{
		display:flex;
		justify-content:center;
		align-items:center
	}
	div{
		width:300px;
		height:300px;

	}

浏览器向服务器发送数据的三种方式
	ajax
	动态脚本标签script插入
	form表单
	frame框架
promise.all()
	用于获取多个异步数据，弥补了传统ajax请求数据时，所带来的的回调地狱，
all()接受多个promise对象，在所有对象都以此执行完成之后resolve，以数组的形式返回一个resolve结果，一旦promise对象中出现一个reject结果，将返回错误，（通过使用catch可以进行错误的捕捉）



实现跨域的方式
	cors 在服务端设置允许跨域 
	jsonp 
	服务器代理


同源策略
	是一种约定，有netScape提出的一个著名的安全策略，是浏览器最核心最基本的安全功能，所谓同源：协议,端口号，域名相同

vue生命周期函数

beforecreate ：组件实例刚被创建，组件属性计算之前，data等等

create 组件实例创建完毕，属性绑定但dom还未生成，$el属性还未存在
beforeMounted ：模板编译/挂在之前
Mounted 模板编译/挂在之后
beforeUpdate 组件更新之前
Updated 组件更新之后
activated （for keep-alive） 组件被激活时调用 组件中使用keep-alive 采有该函数
deactivated （for keep-alive） 组件被移除时调用 组件中使用keep-alive 采有该函数
beforeDestroy 组件销毁之前调用
Destoryed 组件销毁之后调用

es6 新特性
	1.不一样的变量声明：const和let (块级作用域)
	2.模板字符串
	3.箭头函数（Arrow Functions）
	4. 函数的参数默认值
	6.二进制和八进制字面量 
		let oValue = 0o10;
		console.log(oValue); // 8
 
		let bValue = 0b10; // 二进制使用 `0b` 或者 `0B`
		console.log(bValue); // 2
	7.对象和数组解构
	8.对象超类
	9.for...of 和 for...in
	10.ES6中的

event loop
	当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。

当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境。。这个过程反复进行，直到执行栈中的代码全部执行完毕。

箭头函数的this指向
	
	箭头函数的this是在定义函数时绑定的，不是在执行过程中绑定的。简单的说，函数在定义时，this就继承了定义函数的对象。



	




